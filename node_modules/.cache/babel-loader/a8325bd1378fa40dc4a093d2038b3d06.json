{"ast":null,"code":"import _regeneratorRuntime from \"R:\\\\dapp\\\\DeSo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"R:\\\\dapp\\\\DeSo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"R:\\\\dapp\\\\DeSo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _createClass from \"R:\\\\dapp\\\\DeSo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"R:\\\\dapp\\\\DeSo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"R:\\\\dapp\\\\DeSo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"R:\\\\dapp\\\\DeSo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport _wrapNativeSuper from \"R:\\\\dapp\\\\DeSo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/wrapNativeSuper\";\nimport _slicedToArray from \"R:\\\\dapp\\\\DeSo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _toArray from \"R:\\\\dapp\\\\DeSo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toArray\";\nimport _createForOfIteratorHelper from \"R:\\\\dapp\\\\DeSo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _toConsumableArray from \"R:\\\\dapp\\\\DeSo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\n\n/**\n * @remix-run/router v1.3.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nvar PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$initialEntri = _options.initialEntries,\n      initialEntries = _options$initialEntri === void 0 ? [\"/\"] : _options$initialEntri,\n      initialIndex = _options.initialIndex,\n      _options$v5Compat = _options.v5Compat,\n      v5Compat = _options$v5Compat === void 0 ? false : _options$v5Compat;\n  var entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map(function (entry, index) {\n    return createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined);\n  });\n  var index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  var action = Action.Pop;\n  var listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    var location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  var history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref: createHref,\n    createURL: function createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation: function encodeLocation(to) {\n      var path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push: function push(to, state) {\n      action = Action.Push;\n      var nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace: function replace(to, state) {\n      action = Action.Replace;\n      var nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go: function go(delta) {\n      action = Action.Pop;\n      var nextIndex = clampIndex(index + delta);\n      var nextLocation = entries[nextIndex];\n      index = nextIndex;\n\n      if (listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: delta\n        });\n      }\n    },\n    listen: function listen(fn) {\n      listener = fn;\n      return function () {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    var _window$location = window.location,\n        pathname = _window$location.pathname,\n        search = _window$location.search,\n        hash = _window$location.hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    var _parsePath = parsePath(window.location.hash.substr(1)),\n        _parsePath$pathname = _parsePath.pathname,\n        pathname = _parsePath$pathname === void 0 ? \"/\" : _parsePath$pathname,\n        _parsePath$search = _parsePath.search,\n        search = _parsePath$search === void 0 ? \"\" : _parsePath$search,\n        _parsePath$hash = _parsePath.hash,\n        hash = _parsePath$hash === void 0 ? \"\" : _parsePath$hash;\n\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    var base = window.document.querySelector(\"base\");\n    var href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      var url = window.location.href;\n      var hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  var location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state: state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  var _ref$pathname = _ref.pathname,\n      pathname = _ref$pathname === void 0 ? \"/\" : _ref$pathname,\n      _ref$search = _ref.search,\n      search = _ref$search === void 0 ? \"\" : _ref$search,\n      _ref$hash = _ref.hash,\n      hash = _ref$hash === void 0 ? \"\" : _ref$hash;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  var parsedPath = {};\n\n  if (path) {\n    var hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    var searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, _createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options2 = options,\n      _options2$window = _options2.window,\n      window = _options2$window === void 0 ? document.defaultView : _options2$window,\n      _options2$v5Compat = _options2.v5Compat,\n      v5Compat = _options2$v5Compat === void 0 ? false : _options2$v5Compat;\n  var globalHistory = window.history;\n  var action = Action.Pop;\n  var listener = null;\n  var index = getIndex(); // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n\n  function getIndex() {\n    var state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    var nextIndex = getIndex();\n    var delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n\n    if (listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: delta\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    var base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    var href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n\n  var history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen: function listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return function () {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref: function createHref(to) {\n      return _createHref(window, to);\n    },\n    createURL: createURL,\n    encodeLocation: function encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      var url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push: push,\n    replace: replace,\n    go: function go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n\n  return routes.map(function (route, index) {\n    var treePath = [].concat(_toConsumableArray(parentPath), [index]);\n    var id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      var indexRoute = _extends({}, route, {\n        id: id\n      });\n\n      return indexRoute;\n    } else {\n      var pathOrLayoutRoute = _extends({}, route, {\n        id: id,\n        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n      });\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  var location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  var pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  var branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  var matches = null;\n\n  for (var i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  var flattenRoute = function flattenRoute(route, index, relativePath) {\n    var meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route: route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    var path = joinPaths([parentPath, meta.relativePath]);\n    var routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path: path,\n      score: computeScore(path, route.index),\n      routesMeta: routesMeta\n    });\n  };\n\n  routes.forEach(function (route, index) {\n    var _route$path; // coarse-grain check for optional params\n\n\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      var _iterator = _createForOfIteratorHelper(explodeOptionalSegments(route.path)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var exploded = _step.value;\n          flattenRoute(route, index, exploded);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\n\nfunction explodeOptionalSegments(path) {\n  var segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  var _segments = _toArray(segments),\n      first = _segments[0],\n      rest = _segments.slice(1); // Optional path segments are denoted by a trailing `?`\n\n\n  var isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  var required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  var restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  var result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push.apply(result, _toConsumableArray(restExploded.map(function (subpath) {\n    return subpath === \"\" ? required : [required, subpath].join(\"/\");\n  }))); // Then if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push.apply(result, _toConsumableArray(restExploded));\n  } // for absolute paths, ensure `/` instead of empty segment\n\n\n  return result.map(function (exploded) {\n    return path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded;\n  });\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort(function (a, b) {\n    return a.score !== b.score ? b.score - a.score // Higher score first\n    : compareIndexes(a.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }), b.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }));\n  });\n}\n\nvar paramRe = /^:\\w+$/;\nvar dynamicSegmentValue = 3;\nvar indexRouteValue = 2;\nvar emptySegmentValue = 1;\nvar staticSegmentValue = 10;\nvar splatPenalty = -2;\n\nvar isSplat = function isSplat(s) {\n  return s === \"*\";\n};\n\nfunction computeScore(path, index) {\n  var segments = path.split(\"/\");\n  var initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(function (s) {\n    return !isSplat(s);\n  }).reduce(function (score, segment) {\n    return score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue);\n  }, initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  var siblings = a.length === b.length && a.slice(0, -1).every(function (n, i) {\n    return n === b[i];\n  });\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  var routesMeta = branch.routesMeta;\n  var matchedParams = {};\n  var matchedPathname = \"/\";\n  var matches = [];\n\n  for (var i = 0; i < routesMeta.length; ++i) {\n    var meta = routesMeta[i];\n    var end = i === routesMeta.length - 1;\n    var remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    var match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end: end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    var route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route: route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  var path = originalPath;\n\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n\n  return path.replace(/^:(\\w+)(\\??)/g, function (_, key, optional) {\n    var param = params[key];\n\n    if (optional === \"?\") {\n      return param == null ? \"\" : param;\n    }\n\n    if (param == null) {\n      invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n    }\n\n    return param;\n  }).replace(/\\/:(\\w+)(\\??)/g, function (_, key, optional) {\n    var param = params[key];\n\n    if (optional === \"?\") {\n      return param == null ? \"\" : \"/\" + param;\n    }\n\n    if (param == null) {\n      invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n    }\n\n    return \"/\" + param;\n  }) // Remove any optional markers from optional static segments\n  .replace(/\\?/g, \"\").replace(/(\\/?)\\*/, function (_, prefix, __, str) {\n    var star = \"*\";\n\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  var _compilePath = compilePath(pattern.path, pattern.caseSensitive, pattern.end),\n      _compilePath2 = _slicedToArray(_compilePath, 2),\n      matcher = _compilePath2[0],\n      paramNames = _compilePath2[1];\n\n  var match = pathname.match(matcher);\n  if (!match) return null;\n  var matchedPathname = match[0];\n  var pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  var captureGroups = match.slice(1);\n  var params = paramNames.reduce(function (memo, paramName, index) {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      var splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params: params,\n    pathname: matchedPathname,\n    pathnameBase: pathnameBase,\n    pattern: pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  var paramNames = [];\n  var regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, function (_, paramName) {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  var matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  var startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  var nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * @private\n */\n\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging @remix-run/router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  var _ref3 = typeof to === \"string\" ? parsePath(to) : to,\n      toPathname = _ref3.pathname,\n      _ref3$search = _ref3.search,\n      search = _ref3$search === void 0 ? \"\" : _ref3$search,\n      _ref3$hash = _ref3.hash,\n      hash = _ref3$hash === void 0 ? \"\" : _ref3$hash;\n\n  var pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname: pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  var segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  var relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(function (segment) {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter(function (match, index) {\n    return index === 0 || match.route.path && match.route.path.length > 0;\n  });\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  var to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  var isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  var toPathname = isEmptyPath ? \"/\" : to.pathname;\n  var from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    var routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      var toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  var path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  var hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  var hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nvar joinPaths = function joinPaths(paths) {\n  return paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n};\n/**\n * @private\n */\n\n\nvar normalizePathname = function normalizePathname(pathname) {\n  return pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n};\n/**\n * @private\n */\n\n\nvar normalizeSearch = function normalizeSearch(search) {\n  return !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n};\n/**\n * @private\n */\n\n\nvar normalizeHash = function normalizeHash(hash) {\n  return !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n};\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\n\nvar json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  var headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n\nvar AbortedDeferredError = /*#__PURE__*/function (_Error) {\n  _inherits(AbortedDeferredError, _Error);\n\n  var _super = _createSuper(AbortedDeferredError);\n\n  function AbortedDeferredError() {\n    _classCallCheck(this, AbortedDeferredError);\n\n    return _super.apply(this, arguments);\n  }\n\n  return AbortedDeferredError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar DeferredData = /*#__PURE__*/function () {\n  function DeferredData(data, responseInit) {\n    var _this = this;\n\n    _classCallCheck(this, DeferredData);\n\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    var reject;\n    this.abortPromise = new Promise(function (_, r) {\n      return reject = r;\n    });\n    this.controller = new AbortController();\n\n    var onAbort = function onAbort() {\n      return reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    };\n\n    this.unlistenAbortSignal = function () {\n      return _this.controller.signal.removeEventListener(\"abort\", onAbort);\n    };\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce(function (acc, _ref) {\n      var _ref4 = _slicedToArray(_ref, 2),\n          key = _ref4[0],\n          value = _ref4[1];\n\n      return Object.assign(acc, _defineProperty({}, key, _this.trackPromise(key, value)));\n    }, {});\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  _createClass(DeferredData, [{\n    key: \"trackPromise\",\n    value: function trackPromise(key, value) {\n      var _this2 = this;\n\n      if (!(value instanceof Promise)) {\n        return value;\n      }\n\n      this.deferredKeys.push(key);\n      this.pendingKeysSet.add(key); // We store a little wrapper promise that will be extended with\n      // _data/_error props upon resolve/reject\n\n      var promise = Promise.race([value, this.abortPromise]).then(function (data) {\n        return _this2.onSettle(promise, key, null, data);\n      }, function (error) {\n        return _this2.onSettle(promise, key, error);\n      }); // Register rejection listeners to avoid uncaught promise rejections on\n      // errors or aborted deferred values\n\n      promise.catch(function () {});\n      Object.defineProperty(promise, \"_tracked\", {\n        get: function get() {\n          return true;\n        }\n      });\n      return promise;\n    }\n  }, {\n    key: \"onSettle\",\n    value: function onSettle(promise, key, error, data) {\n      if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n        this.unlistenAbortSignal();\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        return Promise.reject(error);\n      }\n\n      this.pendingKeysSet.delete(key);\n\n      if (this.done) {\n        // Nothing left to abort!\n        this.unlistenAbortSignal();\n      }\n\n      if (error) {\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        this.emit(false, key);\n        return Promise.reject(error);\n      }\n\n      Object.defineProperty(promise, \"_data\", {\n        get: function get() {\n          return data;\n        }\n      });\n      this.emit(false, key);\n      return data;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(aborted, settledKey) {\n      this.subscribers.forEach(function (subscriber) {\n        return subscriber(aborted, settledKey);\n      });\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(fn) {\n      var _this3 = this;\n\n      this.subscribers.add(fn);\n      return function () {\n        return _this3.subscribers.delete(fn);\n      };\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var _this4 = this;\n\n      this.controller.abort();\n      this.pendingKeysSet.forEach(function (v, k) {\n        return _this4.pendingKeysSet.delete(k);\n      });\n      this.emit(true);\n    }\n  }, {\n    key: \"resolveData\",\n    value: function () {\n      var _resolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(signal) {\n        var _this5 = this;\n\n        var aborted, onAbort;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                aborted = false;\n\n                if (this.done) {\n                  _context.next = 7;\n                  break;\n                }\n\n                onAbort = function onAbort() {\n                  return _this5.cancel();\n                };\n\n                signal.addEventListener(\"abort\", onAbort);\n                _context.next = 6;\n                return new Promise(function (resolve) {\n                  _this5.subscribe(function (aborted) {\n                    signal.removeEventListener(\"abort\", onAbort);\n\n                    if (aborted || _this5.done) {\n                      resolve(aborted);\n                    }\n                  });\n                });\n\n              case 6:\n                aborted = _context.sent;\n\n              case 7:\n                return _context.abrupt(\"return\", aborted);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function resolveData(_x) {\n        return _resolveData.apply(this, arguments);\n      }\n\n      return resolveData;\n    }()\n  }, {\n    key: \"done\",\n    get: function get() {\n      return this.pendingKeysSet.size === 0;\n    }\n  }, {\n    key: \"unwrappedData\",\n    get: function get() {\n      invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n      return Object.entries(this.data).reduce(function (acc, _ref2) {\n        var _ref5 = _slicedToArray(_ref2, 2),\n            key = _ref5[0],\n            value = _ref5[1];\n\n        return Object.assign(acc, _defineProperty({}, key, unwrapTrackedPromise(value)));\n      }, {});\n    }\n  }, {\n    key: \"pendingKeys\",\n    get: function get() {\n      return Array.from(this.pendingKeysSet);\n    }\n  }]);\n\n  return DeferredData;\n}();\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nvar defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nvar redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  var responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  var headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\n\nvar ErrorResponse = function ErrorResponse(status, statusText, data, internal) {\n  _classCallCheck(this, ErrorResponse);\n\n  if (internal === void 0) {\n    internal = false;\n  }\n\n  this.status = status;\n  this.statusText = statusText || \"\";\n  this.internal = internal;\n\n  if (data instanceof Error) {\n    this.data = data.toString();\n    this.error = data;\n  } else {\n    this.data = data;\n  }\n};\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\n\n\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nvar validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nvar validMutationMethods = new Set(validMutationMethodsArr);\nvar validRequestMethodsArr = [\"get\"].concat(validMutationMethodsArr);\nvar validRequestMethods = new Set(validRequestMethodsArr);\nvar redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nvar redirectPreserveMethodStatusCodes = new Set([307, 308]);\nvar IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nvar IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nvar IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nvar isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nvar isServer = !isBrowser; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  var dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  var unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  var subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  var savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  var getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  var getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  var initialScrollRestored = init.hydrationData != null;\n  var initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  var initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    var error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n\n    var _getShortCircuitMatch = getShortCircuitMatches(dataRoutes),\n        matches = _getShortCircuitMatch.matches,\n        route = _getShortCircuitMatch.route;\n\n    initialMatches = matches;\n    initialErrors = _defineProperty({}, route.id, error);\n  }\n\n  var initialized = !initialMatches.some(function (m) {\n    return m.route.loader;\n  }) || init.hydrationData != null;\n  var router;\n  var state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized: initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  var pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  var pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  var pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  var isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  var isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  var cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  var cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  var fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  var incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  var pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  var fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  var fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  var fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  var activeDeferreds = new Map(); // We ony support a single active blocker at the moment since we don't have\n  // any compelling use cases for multi-blocker yet\n\n  var activeBlocker = null; // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n\n  var blockerFunctions = new Map(); // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n\n  var ignoreNextHistoryUpdate = false; // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(function (_ref) {\n      var historyAction = _ref.action,\n          location = _ref.location,\n          delta = _ref.delta; // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n\n      warning(activeBlocker != null && delta === null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      var blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction: historyAction\n      });\n\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1); // Put the blocker into a blocked state\n\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location: location,\n          proceed: function proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location: location\n            }); // Re-do the same POP navigation we just blocked\n\n            init.history.go(delta);\n          },\n          reset: function reset() {\n            deleteBlocker(blockerKey);\n            updateState({\n              blockers: new Map(router.state.blockers)\n            });\n          }\n        });\n        return;\n      }\n\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach(function (_, key) {\n      return deleteFetcher(key);\n    });\n    state.blockers.forEach(function (_, key) {\n      return deleteBlocker(key);\n    });\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return function () {\n      return subscribers.delete(fn);\n    };\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(function (subscriber) {\n      return subscriber(state);\n    });\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2; // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n\n\n    var isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    var actionData;\n\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n\n    var loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n\n    var _iterator2 = _createForOfIteratorHelper(blockerFunctions),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _step2$value = _slicedToArray(_step2.value, 1),\n            key = _step2$value[0];\n\n        deleteBlocker(key);\n      } // Always respect the user flag.  Otherwise don't reset on mutation\n      // submission navigations unless they redirect\n\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    var preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    updateState(_extends({}, newState, {\n      actionData: actionData,\n      loaderData: loaderData,\n      historyAction: pendingAction,\n      location: location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: preventScrollReset,\n      blockers: new Map(state.blockers)\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  function navigate(_x2, _x3) {\n    return _navigate.apply(this, arguments);\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function _navigate() {\n    _navigate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(to, opts) {\n      var _normalizeNavigateOpt2, path, submission, error, currentLocation, nextLocation, userReplace, historyAction, preventScrollReset, blockerKey;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(typeof to === \"number\")) {\n                _context2.next = 3;\n                break;\n              }\n\n              init.history.go(to);\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              _normalizeNavigateOpt2 = normalizeNavigateOptions(to, opts), path = _normalizeNavigateOpt2.path, submission = _normalizeNavigateOpt2.submission, error = _normalizeNavigateOpt2.error;\n              currentLocation = state.location;\n              nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n              // URL from window.location, so we need to encode it here so the behavior\n              // remains the same as POP and non-data-router usages.  new URL() does all\n              // the same encoding we'd get from a history.pushState/window.location read\n              // without having to touch history\n\n              nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n              userReplace = opts && opts.replace != null ? opts.replace : undefined;\n              historyAction = Action.Push;\n\n              if (userReplace === true) {\n                historyAction = Action.Replace;\n              } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n                // By default on submissions to the current location we REPLACE so that\n                // users don't have to double-click the back button to get to the prior\n                // location.  If the user redirects to a different location from the\n                // action/loader this will be ignored and the redirect will be a PUSH\n                historyAction = Action.Replace;\n              }\n\n              preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n              blockerKey = shouldBlockNavigation({\n                currentLocation: currentLocation,\n                nextLocation: nextLocation,\n                historyAction: historyAction\n              });\n\n              if (!blockerKey) {\n                _context2.next = 15;\n                break;\n              }\n\n              // Put the blocker into a blocked state\n              updateBlocker(blockerKey, {\n                state: \"blocked\",\n                location: nextLocation,\n                proceed: function proceed() {\n                  updateBlocker(blockerKey, {\n                    state: \"proceeding\",\n                    proceed: undefined,\n                    reset: undefined,\n                    location: nextLocation\n                  }); // Send the same navigation through\n\n                  navigate(to, opts);\n                },\n                reset: function reset() {\n                  deleteBlocker(blockerKey);\n                  updateState({\n                    blockers: new Map(state.blockers)\n                  });\n                }\n              });\n              return _context2.abrupt(\"return\");\n\n            case 15:\n              _context2.next = 17;\n              return startNavigation(historyAction, nextLocation, {\n                submission: submission,\n                // Send through the formData serialization error if we have one so we can\n                // render at the right error boundary after we match routes\n                pendingError: error,\n                preventScrollReset: preventScrollReset,\n                replace: opts && opts.replace\n              });\n\n            case 17:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _navigate.apply(this, arguments);\n  }\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  function startNavigation(_x4, _x5, _x6) {\n    return _startNavigation.apply(this, arguments);\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  function _startNavigation() {\n    _startNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(historyAction, location, opts) {\n      var loadingNavigation, matches, _error, _getShortCircuitMatch2, notFoundMatches, _route, request, pendingActionData, pendingError, actionOutput, navigation, _yield$handleLoaders, shortCircuited, loaderData, errors;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // Abort any in-progress navigations and start a new one. Unset any ongoing\n              // uninterrupted revalidations unless told otherwise, since we want this\n              // new navigation to update history normally\n              pendingNavigationController && pendingNavigationController.abort();\n              pendingNavigationController = null;\n              pendingAction = historyAction;\n              isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n              // and track whether we should reset scroll on completion\n\n              saveScrollPosition(state.location, state.matches);\n              pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n              loadingNavigation = opts && opts.overrideNavigation;\n              matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n              if (matches) {\n                _context3.next = 14;\n                break;\n              }\n\n              _error = getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n              _getShortCircuitMatch2 = getShortCircuitMatches(dataRoutes), notFoundMatches = _getShortCircuitMatch2.matches, _route = _getShortCircuitMatch2.route; // Cancel all pending deferred on 404s since we don't keep any routes\n\n              cancelActiveDeferreds();\n              completeNavigation(location, {\n                matches: notFoundMatches,\n                loaderData: {},\n                errors: _defineProperty({}, _route.id, _error)\n              });\n              return _context3.abrupt(\"return\");\n\n            case 14:\n              if (!(isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod)))) {\n                _context3.next = 17;\n                break;\n              }\n\n              completeNavigation(location, {\n                matches: matches\n              });\n              return _context3.abrupt(\"return\");\n\n            case 17:\n              // Create a controller/Request for this navigation\n              pendingNavigationController = new AbortController();\n              request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n\n              if (!(opts && opts.pendingError)) {\n                _context3.next = 23;\n                break;\n              }\n\n              // If we have a pendingError, it means the user attempted a GET submission\n              // with binary FormData so assign here and skip to handleLoaders.  That\n              // way we handle calling loaders above the boundary etc.  It's not really\n              // different from an actionError in that sense.\n              pendingError = _defineProperty({}, findNearestBoundary(matches).route.id, opts.pendingError);\n              _context3.next = 34;\n              break;\n\n            case 23:\n              if (!(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n                _context3.next = 34;\n                break;\n              }\n\n              _context3.next = 26;\n              return handleAction(request, location, opts.submission, matches, {\n                replace: opts.replace\n              });\n\n            case 26:\n              actionOutput = _context3.sent;\n\n              if (!actionOutput.shortCircuited) {\n                _context3.next = 29;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 29:\n              pendingActionData = actionOutput.pendingActionData;\n              pendingError = actionOutput.pendingActionError;\n              navigation = _extends({\n                state: \"loading\",\n                location: location\n              }, opts.submission);\n              loadingNavigation = navigation; // Create a GET request for the loaders\n\n              request = new Request(request.url, {\n                signal: request.signal\n              });\n\n            case 34:\n              _context3.next = 36;\n              return handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n\n            case 36:\n              _yield$handleLoaders = _context3.sent;\n              shortCircuited = _yield$handleLoaders.shortCircuited;\n              loaderData = _yield$handleLoaders.loaderData;\n              errors = _yield$handleLoaders.errors;\n\n              if (!shortCircuited) {\n                _context3.next = 42;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 42:\n              // Clean up now that the action/loaders have completed.  Don't clean up if\n              // we short circuited because pendingNavigationController will have already\n              // been assigned to a new controller for the next navigation\n              pendingNavigationController = null;\n              completeNavigation(location, _extends({\n                matches: matches\n              }, pendingActionData ? {\n                actionData: pendingActionData\n              } : {}, {\n                loaderData: loaderData,\n                errors: errors\n              }));\n\n            case 44:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _startNavigation.apply(this, arguments);\n  }\n\n  function handleAction(_x7, _x8, _x9, _x10, _x11) {\n    return _handleAction.apply(this, arguments);\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  function _handleAction() {\n    _handleAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(request, location, submission, matches, opts) {\n      var navigation, result, actionMatch, replace, boundaryMatch;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              interruptActiveLoads(); // Put us in a submitting state\n\n              navigation = _extends({\n                state: \"submitting\",\n                location: location\n              }, submission);\n              updateState({\n                navigation: navigation\n              }); // Call our action and get the result\n\n              actionMatch = getTargetMatch(matches, location);\n\n              if (actionMatch.route.action) {\n                _context4.next = 8;\n                break;\n              }\n\n              result = {\n                type: ResultType.error,\n                error: getInternalRouterError(405, {\n                  method: request.method,\n                  pathname: location.pathname,\n                  routeId: actionMatch.route.id\n                })\n              };\n              _context4.next = 13;\n              break;\n\n            case 8:\n              _context4.next = 10;\n              return callLoaderOrAction(\"action\", request, actionMatch, matches, router.basename);\n\n            case 10:\n              result = _context4.sent;\n\n              if (!request.signal.aborted) {\n                _context4.next = 13;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 13:\n              if (!isRedirectResult(result)) {\n                _context4.next = 18;\n                break;\n              }\n\n              if (opts && opts.replace != null) {\n                replace = opts.replace;\n              } else {\n                // If the user didn't explicity indicate replace behavior, replace if\n                // we redirected to the exact same location we're currently at to avoid\n                // double back-buttons\n                replace = result.location === state.location.pathname + state.location.search;\n              }\n\n              _context4.next = 17;\n              return startRedirectNavigation(state, result, {\n                submission: submission,\n                replace: replace\n              });\n\n            case 17:\n              return _context4.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 18:\n              if (!isErrorResult(result)) {\n                _context4.next = 22;\n                break;\n              }\n\n              // Store off the pending error - we use it to determine which loaders\n              // to call and will commit it when we complete the navigation\n              boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n              // action threw an error that'll be rendered in an errorElement, we fall\n              // back to PUSH so that the user can use the back button to get back to\n              // the pre-submission form location to try again\n\n              if ((opts && opts.replace) !== true) {\n                pendingAction = Action.Push;\n              }\n\n              return _context4.abrupt(\"return\", {\n                // Send back an empty object we can use to clear out any prior actionData\n                pendingActionData: {},\n                pendingActionError: _defineProperty({}, boundaryMatch.route.id, result.error)\n              });\n\n            case 22:\n              if (!isDeferredResult(result)) {\n                _context4.next = 24;\n                break;\n              }\n\n              throw getInternalRouterError(400, {\n                type: \"defer-action\"\n              });\n\n            case 24:\n              return _context4.abrupt(\"return\", {\n                pendingActionData: _defineProperty({}, actionMatch.route.id, result.data)\n              });\n\n            case 25:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _handleAction.apply(this, arguments);\n  }\n\n  function handleLoaders(_x12, _x13, _x14, _x15, _x16, _x17, _x18, _x19) {\n    return _handleLoaders.apply(this, arguments);\n  }\n\n  function _handleLoaders() {\n    _handleLoaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n      var loadingNavigation, navigation, activeSubmission, _getMatchesToLoad, _getMatchesToLoad2, matchesToLoad, revalidatingFetchers, actionData, _yield$callLoadersAnd, results, loaderResults, fetcherResults, redirect, _processLoaderData, loaderData, errors, didAbortFetchLoads;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              // Figure out the right navigation we want to use for data loading\n              loadingNavigation = overrideNavigation;\n\n              if (!loadingNavigation) {\n                navigation = _extends({\n                  state: \"loading\",\n                  location: location,\n                  formMethod: undefined,\n                  formAction: undefined,\n                  formEncType: undefined,\n                  formData: undefined\n                }, submission);\n                loadingNavigation = navigation;\n              } // If this was a redirect from an action we don't have a \"submission\" but\n              // we have it on the loading navigation so use that if available\n\n\n              activeSubmission = submission ? submission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {\n                formMethod: loadingNavigation.formMethod,\n                formAction: loadingNavigation.formAction,\n                formData: loadingNavigation.formData,\n                formEncType: loadingNavigation.formEncType\n              } : undefined;\n              _getMatchesToLoad = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches), _getMatchesToLoad2 = _slicedToArray(_getMatchesToLoad, 2), matchesToLoad = _getMatchesToLoad2[0], revalidatingFetchers = _getMatchesToLoad2[1]; // Cancel pending deferreds for no-longer-matched routes or routes we're\n              // about to reload.  Note that if this is an action reload we would have\n              // already cancelled all pending deferreds so this would be a no-op\n\n              cancelActiveDeferreds(function (routeId) {\n                return !(matches && matches.some(function (m) {\n                  return m.route.id === routeId;\n                })) || matchesToLoad && matchesToLoad.some(function (m) {\n                  return m.route.id === routeId;\n                });\n              }); // Short circuit if we have no loaders to run\n\n              if (!(matchesToLoad.length === 0 && revalidatingFetchers.length === 0)) {\n                _context5.next = 8;\n                break;\n              }\n\n              completeNavigation(location, _extends({\n                matches: matches,\n                loaderData: {},\n                // Commit pending error if we're short circuiting\n                errors: pendingError || null\n              }, pendingActionData ? {\n                actionData: pendingActionData\n              } : {}));\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 8:\n              // If this is an uninterrupted revalidation, we remain in our current idle\n              // state.  If not, we need to switch to our loading state and load data,\n              // preserving any new action data or existing action data (in the case of\n              // a revalidation interrupting an actionReload)\n              if (!isUninterruptedRevalidation) {\n                revalidatingFetchers.forEach(function (rf) {\n                  var fetcher = state.fetchers.get(rf.key);\n                  var revalidatingFetcher = {\n                    state: \"loading\",\n                    data: fetcher && fetcher.data,\n                    formMethod: undefined,\n                    formAction: undefined,\n                    formEncType: undefined,\n                    formData: undefined,\n                    \" _hasFetcherDoneAnything \": true\n                  };\n                  state.fetchers.set(rf.key, revalidatingFetcher);\n                });\n                actionData = pendingActionData || state.actionData;\n                updateState(_extends({\n                  navigation: loadingNavigation\n                }, actionData ? Object.keys(actionData).length === 0 ? {\n                  actionData: null\n                } : {\n                  actionData: actionData\n                } : {}, revalidatingFetchers.length > 0 ? {\n                  fetchers: new Map(state.fetchers)\n                } : {}));\n              }\n\n              pendingNavigationLoadId = ++incrementingLoadId;\n              revalidatingFetchers.forEach(function (rf) {\n                return fetchControllers.set(rf.key, pendingNavigationController);\n              });\n              _context5.next = 13;\n              return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n            case 13:\n              _yield$callLoadersAnd = _context5.sent;\n              results = _yield$callLoadersAnd.results;\n              loaderResults = _yield$callLoadersAnd.loaderResults;\n              fetcherResults = _yield$callLoadersAnd.fetcherResults;\n\n              if (!request.signal.aborted) {\n                _context5.next = 19;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 19:\n              // Clean up _after_ loaders have completed.  Don't clean up if we short\n              // circuited because fetchControllers would have been aborted and\n              // reassigned to new controllers for the next navigation\n              revalidatingFetchers.forEach(function (rf) {\n                return fetchControllers.delete(rf.key);\n              }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n              redirect = findRedirect(results);\n\n              if (!redirect) {\n                _context5.next = 25;\n                break;\n              }\n\n              _context5.next = 24;\n              return startRedirectNavigation(state, redirect, {\n                replace: replace\n              });\n\n            case 24:\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 25:\n              // Process and commit output from loaders\n              _processLoaderData = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData.loaderData, errors = _processLoaderData.errors; // Wire up subscribers to update loaderData as promises settle\n\n              activeDeferreds.forEach(function (deferredData, routeId) {\n                deferredData.subscribe(function (aborted) {\n                  // Note: No need to updateState here since the TrackedPromise on\n                  // loaderData is stable across resolve/reject\n                  // Remove this instance if we were aborted or if promises have settled\n                  if (aborted || deferredData.done) {\n                    activeDeferreds.delete(routeId);\n                  }\n                });\n              });\n              markFetchRedirectsDone();\n              didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n              return _context5.abrupt(\"return\", _extends({\n                loaderData: loaderData,\n                errors: errors\n              }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n                fetchers: new Map(state.fetchers)\n              } : {}));\n\n            case 30:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _handleLoaders.apply(this, arguments);\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    var matches = matchRoutes(dataRoutes, href, init.basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: href\n      }));\n      return;\n    }\n\n    var _normalizeNavigateOpt = normalizeNavigateOptions(href, opts, true),\n        path = _normalizeNavigateOpt.path,\n        submission = _normalizeNavigateOpt.submission;\n\n    var match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, {\n      routeId: routeId,\n      path: path,\n      match: match,\n      matches: matches\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  function handleFetcherAction(_x20, _x21, _x22, _x23, _x24, _x25) {\n    return _handleFetcherAction.apply(this, arguments);\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  function _handleFetcherAction() {\n    _handleFetcherAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(key, routeId, path, match, requestMatches, submission) {\n      var _error2, existingFetcher, fetcher, abortController, fetchRequest, actionResult, loadingFetcher, nextLocation, revalidationRequest, matches, loadId, loadFetcher, _getMatchesToLoad3, _getMatchesToLoad4, matchesToLoad, revalidatingFetchers, _yield$callLoadersAnd2, results, loaderResults, fetcherResults, redirect, _processLoaderData2, loaderData, errors, doneFetcher, didAbortFetchLoads;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              interruptActiveLoads();\n              fetchLoadMatches.delete(key);\n\n              if (match.route.action) {\n                _context6.next = 6;\n                break;\n              }\n\n              _error2 = getInternalRouterError(405, {\n                method: submission.formMethod,\n                pathname: path,\n                routeId: routeId\n              });\n              setFetcherError(key, routeId, _error2);\n              return _context6.abrupt(\"return\");\n\n            case 6:\n              // Put this fetcher into it's submitting state\n              existingFetcher = state.fetchers.get(key);\n              fetcher = _extends({\n                state: \"submitting\"\n              }, submission, {\n                data: existingFetcher && existingFetcher.data,\n                \" _hasFetcherDoneAnything \": true\n              });\n              state.fetchers.set(key, fetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              }); // Call the action for the fetcher\n\n              abortController = new AbortController();\n              fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n              fetchControllers.set(key, abortController);\n              _context6.next = 15;\n              return callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, router.basename);\n\n            case 15:\n              actionResult = _context6.sent;\n\n              if (!fetchRequest.signal.aborted) {\n                _context6.next = 19;\n                break;\n              }\n\n              // We can delete this so long as we weren't aborted by ou our own fetcher\n              // re-submit which would have put _new_ controller is in fetchControllers\n              if (fetchControllers.get(key) === abortController) {\n                fetchControllers.delete(key);\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 19:\n              if (!isRedirectResult(actionResult)) {\n                _context6.next = 26;\n                break;\n              }\n\n              fetchControllers.delete(key);\n              fetchRedirectIds.add(key);\n              loadingFetcher = _extends({\n                state: \"loading\"\n              }, submission, {\n                data: undefined,\n                \" _hasFetcherDoneAnything \": true\n              });\n              state.fetchers.set(key, loadingFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n              return _context6.abrupt(\"return\", startRedirectNavigation(state, actionResult, {\n                isFetchActionRedirect: true\n              }));\n\n            case 26:\n              if (!isErrorResult(actionResult)) {\n                _context6.next = 29;\n                break;\n              }\n\n              setFetcherError(key, routeId, actionResult.error);\n              return _context6.abrupt(\"return\");\n\n            case 29:\n              if (!isDeferredResult(actionResult)) {\n                _context6.next = 31;\n                break;\n              }\n\n              throw getInternalRouterError(400, {\n                type: \"defer-action\"\n              });\n\n            case 31:\n              // Start the data load for current matches, or the next location if we're\n              // in the middle of a navigation\n              nextLocation = state.navigation.location || state.location;\n              revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n              matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n              invariant(matches, \"Didn't find any matches after fetcher action\");\n              loadId = ++incrementingLoadId;\n              fetchReloadIds.set(key, loadId);\n              loadFetcher = _extends({\n                state: \"loading\",\n                data: actionResult.data\n              }, submission, {\n                \" _hasFetcherDoneAnything \": true\n              });\n              state.fetchers.set(key, loadFetcher);\n              _getMatchesToLoad3 = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, _defineProperty({}, match.route.id, actionResult.data), undefined, // No need to send through errors since we short circuit above\n              fetchLoadMatches), _getMatchesToLoad4 = _slicedToArray(_getMatchesToLoad3, 2), matchesToLoad = _getMatchesToLoad4[0], revalidatingFetchers = _getMatchesToLoad4[1]; // Put all revalidating fetchers into the loading state, except for the\n              // current fetcher which we want to keep in it's current loading state which\n              // contains it's action submission info + action data\n\n              revalidatingFetchers.filter(function (rf) {\n                return rf.key !== key;\n              }).forEach(function (rf) {\n                var staleKey = rf.key;\n                var existingFetcher = state.fetchers.get(staleKey);\n                var revalidatingFetcher = {\n                  state: \"loading\",\n                  data: existingFetcher && existingFetcher.data,\n                  formMethod: undefined,\n                  formAction: undefined,\n                  formEncType: undefined,\n                  formData: undefined,\n                  \" _hasFetcherDoneAnything \": true\n                };\n                state.fetchers.set(staleKey, revalidatingFetcher);\n                fetchControllers.set(staleKey, abortController);\n              });\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n              _context6.next = 44;\n              return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n            case 44:\n              _yield$callLoadersAnd2 = _context6.sent;\n              results = _yield$callLoadersAnd2.results;\n              loaderResults = _yield$callLoadersAnd2.loaderResults;\n              fetcherResults = _yield$callLoadersAnd2.fetcherResults;\n\n              if (!abortController.signal.aborted) {\n                _context6.next = 50;\n                break;\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 50:\n              fetchReloadIds.delete(key);\n              fetchControllers.delete(key);\n              revalidatingFetchers.forEach(function (r) {\n                return fetchControllers.delete(r.key);\n              });\n              redirect = findRedirect(results);\n\n              if (!redirect) {\n                _context6.next = 56;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", startRedirectNavigation(state, redirect));\n\n            case 56:\n              // Process and commit output from loaders\n              _processLoaderData2 = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData2.loaderData, errors = _processLoaderData2.errors;\n              doneFetcher = {\n                state: \"idle\",\n                data: actionResult.data,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined,\n                \" _hasFetcherDoneAnything \": true\n              };\n              state.fetchers.set(key, doneFetcher);\n              didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n              // more recent than the navigation, we want the newer data so abort the\n              // navigation and complete it with the fetcher data\n\n              if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n                invariant(pendingAction, \"Expected pending action\");\n                pendingNavigationController && pendingNavigationController.abort();\n                completeNavigation(state.navigation.location, {\n                  matches: matches,\n                  loaderData: loaderData,\n                  errors: errors,\n                  fetchers: new Map(state.fetchers)\n                });\n              } else {\n                // otherwise just update with the fetcher data, preserving any existing\n                // loaderData for loaders that did not need to reload.  We have to\n                // manually merge here since we aren't going through completeNavigation\n                updateState(_extends({\n                  errors: errors,\n                  loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n                }, didAbortFetchLoads ? {\n                  fetchers: new Map(state.fetchers)\n                } : {}));\n                isRevalidationRequired = false;\n              }\n\n            case 61:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n    return _handleFetcherAction.apply(this, arguments);\n  }\n\n  function handleFetcherLoader(_x26, _x27, _x28, _x29, _x30, _x31) {\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  function _handleFetcherLoader() {\n    _handleFetcherLoader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(key, routeId, path, match, matches, submission) {\n      var existingFetcher, loadingFetcher, abortController, fetchRequest, result, boundaryMatch, doneFetcher;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n              loadingFetcher = _extends({\n                state: \"loading\",\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined\n              }, submission, {\n                data: existingFetcher && existingFetcher.data,\n                \" _hasFetcherDoneAnything \": true\n              });\n              state.fetchers.set(key, loadingFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              }); // Call the loader for this fetcher route match\n\n              abortController = new AbortController();\n              fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n              fetchControllers.set(key, abortController);\n              _context7.next = 9;\n              return callLoaderOrAction(\"loader\", fetchRequest, match, matches, router.basename);\n\n            case 9:\n              result = _context7.sent;\n\n              if (!isDeferredResult(result)) {\n                _context7.next = 17;\n                break;\n              }\n\n              _context7.next = 13;\n              return resolveDeferredData(result, fetchRequest.signal, true);\n\n            case 13:\n              _context7.t0 = _context7.sent;\n\n              if (_context7.t0) {\n                _context7.next = 16;\n                break;\n              }\n\n              _context7.t0 = result;\n\n            case 16:\n              result = _context7.t0;\n\n            case 17:\n              // We can delete this so long as we weren't aborted by ou our own fetcher\n              // re-load which would have put _new_ controller is in fetchControllers\n              if (fetchControllers.get(key) === abortController) {\n                fetchControllers.delete(key);\n              }\n\n              if (!fetchRequest.signal.aborted) {\n                _context7.next = 20;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 20:\n              if (!isRedirectResult(result)) {\n                _context7.next = 24;\n                break;\n              }\n\n              _context7.next = 23;\n              return startRedirectNavigation(state, result);\n\n            case 23:\n              return _context7.abrupt(\"return\");\n\n            case 24:\n              if (!isErrorResult(result)) {\n                _context7.next = 29;\n                break;\n              }\n\n              boundaryMatch = findNearestBoundary(state.matches, routeId);\n              state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n              // do we need to behave any differently with our non-redirect errors?\n              // What if it was a non-redirect Response?\n\n              updateState({\n                fetchers: new Map(state.fetchers),\n                errors: _defineProperty({}, boundaryMatch.route.id, result.error)\n              });\n              return _context7.abrupt(\"return\");\n\n            case 29:\n              invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n              doneFetcher = {\n                state: \"idle\",\n                data: result.data,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined,\n                \" _hasFetcherDoneAnything \": true\n              };\n              state.fetchers.set(key, doneFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n\n            case 33:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n\n  function startRedirectNavigation(_x32, _x33, _x34) {\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n\n  function _startRedirectNavigation() {\n    _startRedirectNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(state, redirect, _temp) {\n      var _window, _ref6, submission, replace, isFetchActionRedirect, redirectLocation, newOrigin, redirectHistoryAction, _state$navigation, formMethod, formAction, formEncType, formData;\n\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _ref6 = _temp === void 0 ? {} : _temp, submission = _ref6.submission, replace = _ref6.replace, isFetchActionRedirect = _ref6.isFetchActionRedirect;\n\n              if (redirect.revalidate) {\n                isRevalidationRequired = true;\n              }\n\n              redirectLocation = createLocation(state.location, redirect.location, // TODO: This can be removed once we get rid of useTransition in Remix v2\n              _extends({\n                _isRedirect: true\n              }, isFetchActionRedirect ? {\n                _isFetchActionRedirect: true\n              } : {}));\n              invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an external redirect that goes to a new origin\n\n              if (!(isBrowser && typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\")) {\n                _context8.next = 9;\n                break;\n              }\n\n              newOrigin = init.history.createURL(redirect.location).origin;\n\n              if (!(window.location.origin !== newOrigin)) {\n                _context8.next = 9;\n                break;\n              }\n\n              if (replace) {\n                window.location.replace(redirect.location);\n              } else {\n                window.location.assign(redirect.location);\n              }\n\n              return _context8.abrupt(\"return\");\n\n            case 9:\n              // There's no need to abort on redirects, since we don't detect the\n              // redirect until the action/loaders have settled\n              pendingNavigationController = null;\n              redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n              // state.navigation\n\n              _state$navigation = state.navigation, formMethod = _state$navigation.formMethod, formAction = _state$navigation.formAction, formEncType = _state$navigation.formEncType, formData = _state$navigation.formData;\n\n              if (!submission && formMethod && formAction && formData && formEncType) {\n                submission = {\n                  formMethod: formMethod,\n                  formAction: formAction,\n                  formEncType: formEncType,\n                  formData: formData\n                };\n              } // If this was a 307/308 submission we want to preserve the HTTP method and\n              // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n              // redirected location\n\n\n              if (!(redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod))) {\n                _context8.next = 18;\n                break;\n              }\n\n              _context8.next = 16;\n              return startNavigation(redirectHistoryAction, redirectLocation, {\n                submission: _extends({}, submission, {\n                  formAction: redirect.location\n                }),\n                // Preserve this flag across redirects\n                preventScrollReset: pendingPreventScrollReset\n              });\n\n            case 16:\n              _context8.next = 20;\n              break;\n\n            case 18:\n              _context8.next = 20;\n              return startNavigation(redirectHistoryAction, redirectLocation, {\n                overrideNavigation: {\n                  state: \"loading\",\n                  location: redirectLocation,\n                  formMethod: submission ? submission.formMethod : undefined,\n                  formAction: submission ? submission.formAction : undefined,\n                  formEncType: submission ? submission.formEncType : undefined,\n                  formData: submission ? submission.formData : undefined\n                },\n                // Preserve this flag across redirects\n                preventScrollReset: pendingPreventScrollReset\n              });\n\n            case 20:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n\n  function callLoadersAndMaybeResolveData(_x35, _x36, _x37, _x38, _x39) {\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n\n  function _callLoadersAndMaybeResolveData() {\n    _callLoadersAndMaybeResolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n      var results, loaderResults, fetcherResults;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return Promise.all([].concat(_toConsumableArray(matchesToLoad.map(function (match) {\n                return callLoaderOrAction(\"loader\", request, match, matches, router.basename);\n              })), _toConsumableArray(fetchersToLoad.map(function (f) {\n                return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, request.signal), f.match, f.matches, router.basename);\n              }))));\n\n            case 2:\n              results = _context9.sent;\n              loaderResults = results.slice(0, matchesToLoad.length);\n              fetcherResults = results.slice(matchesToLoad.length);\n              _context9.next = 7;\n              return Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(function (f) {\n                return f.match;\n              }), fetcherResults, request.signal, true)]);\n\n            case 7:\n              return _context9.abrupt(\"return\", {\n                results: results,\n                loaderResults: loaderResults,\n                fetcherResults: fetcherResults\n              });\n\n            case 8:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n\n  function interruptActiveLoads() {\n    var _cancelledDeferredRou;\n\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    (_cancelledDeferredRou = cancelledDeferredRoutes).push.apply(_cancelledDeferredRou, _toConsumableArray(cancelActiveDeferreds())); // Abort in-flight fetcher loads\n\n\n    fetchLoadMatches.forEach(function (_, key) {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    var boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: _defineProperty({}, boundaryMatch.route.id, error),\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    var controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    var _iterator3 = _createForOfIteratorHelper(keys),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var key = _step3.value;\n        var fetcher = getFetcher(key);\n        var doneFetcher = {\n          state: \"idle\",\n          data: fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true\n        };\n        state.fetchers.set(key, doneFetcher);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    var doneKeys = [];\n\n    var _iterator4 = _createForOfIteratorHelper(fetchRedirectIds),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var key = _step4.value;\n        var fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          fetchRedirectIds.delete(key);\n          doneKeys.push(key);\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    var yeetedKeys = [];\n\n    var _iterator5 = _createForOfIteratorHelper(fetchReloadIds),\n        _step5;\n\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var _step5$value = _slicedToArray(_step5.value, 2),\n            key = _step5$value[0],\n            id = _step5$value[1];\n\n        if (id < landedId) {\n          var fetcher = state.fetchers.get(key);\n          invariant(fetcher, \"Expected fetcher: \" + key);\n\n          if (fetcher.state === \"loading\") {\n            abortFetcher(key);\n            fetchReloadIds.delete(key);\n            yeetedKeys.push(key);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key, fn) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n\n      if (activeBlocker == null) {\n        // This is now the active blocker\n        activeBlocker = key;\n      } else if (key !== activeBlocker) {\n        warning(false, \"A router only supports one blocker at a time\");\n      }\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n\n    if (activeBlocker === key) {\n      activeBlocker = null;\n    }\n  } // Utility function to update blockers, ensuring valid state transitions\n\n\n  function updateBlocker(key, newBlocker) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    state.blockers.set(key, newBlocker);\n    updateState({\n      blockers: new Map(state.blockers)\n    });\n  }\n\n  function shouldBlockNavigation(_ref2) {\n    var currentLocation = _ref2.currentLocation,\n        nextLocation = _ref2.nextLocation,\n        historyAction = _ref2.historyAction;\n\n    if (activeBlocker == null) {\n      return;\n    } // We only allow a single blocker at the moment.  This will need to be\n    // updated if we enhance to support multiple blockers in the future\n\n\n    var blockerFunction = blockerFunctions.get(activeBlocker);\n    invariant(blockerFunction, \"Could not find a function for the active blocker\");\n    var blocker = state.blockers.get(activeBlocker);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    } // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n\n\n    if (blockerFunction({\n      currentLocation: currentLocation,\n      nextLocation: nextLocation,\n      historyAction: historyAction\n    })) {\n      return activeBlocker;\n    }\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    var cancelledRouteIds = [];\n    activeDeferreds.forEach(function (dfd, routeId) {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || function (location) {\n      return location.key;\n    }; // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      var y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return function () {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      var y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize: initialize,\n    subscribe: subscribe,\n    enableScrollRestoration: enableScrollRestoration,\n    navigate: navigate,\n    fetch: fetch,\n    revalidate: revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: function createHref(to) {\n      return init.history.createHref(to);\n    },\n    encodeLocation: function encodeLocation(to) {\n      return init.history.encodeLocation(to);\n    },\n    getFetcher: getFetcher,\n    deleteFetcher: deleteFetcher,\n    dispose: dispose,\n    getBlocker: getBlocker,\n    deleteBlocker: deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  var dataRoutes = convertRoutesToDataRoutes(routes);\n  var basename = (opts ? opts.basename : null) || \"/\";\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  function query(_x40, _x41) {\n    return _query.apply(this, arguments);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n\n\n  function _query() {\n    _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(request, _temp2) {\n      var _ref7, requestContext, url, method, location, matches, error, _getShortCircuitMatch3, methodNotAllowedMatches, route, _error3, _getShortCircuitMatch4, notFoundMatches, _route2, result;\n\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _ref7 = _temp2 === void 0 ? {} : _temp2, requestContext = _ref7.requestContext;\n              url = new URL(request.url);\n              method = request.method.toLowerCase();\n              location = createLocation(\"\", createPath(url), null, \"default\");\n              matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n              if (!(!isValidMethod(method) && method !== \"head\")) {\n                _context10.next = 11;\n                break;\n              }\n\n              error = getInternalRouterError(405, {\n                method: method\n              });\n              _getShortCircuitMatch3 = getShortCircuitMatches(dataRoutes), methodNotAllowedMatches = _getShortCircuitMatch3.matches, route = _getShortCircuitMatch3.route;\n              return _context10.abrupt(\"return\", {\n                basename: basename,\n                location: location,\n                matches: methodNotAllowedMatches,\n                loaderData: {},\n                actionData: null,\n                errors: _defineProperty({}, route.id, error),\n                statusCode: error.status,\n                loaderHeaders: {},\n                actionHeaders: {},\n                activeDeferreds: null\n              });\n\n            case 11:\n              if (matches) {\n                _context10.next = 15;\n                break;\n              }\n\n              _error3 = getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n              _getShortCircuitMatch4 = getShortCircuitMatches(dataRoutes), notFoundMatches = _getShortCircuitMatch4.matches, _route2 = _getShortCircuitMatch4.route;\n              return _context10.abrupt(\"return\", {\n                basename: basename,\n                location: location,\n                matches: notFoundMatches,\n                loaderData: {},\n                actionData: null,\n                errors: _defineProperty({}, _route2.id, _error3),\n                statusCode: _error3.status,\n                loaderHeaders: {},\n                actionHeaders: {},\n                activeDeferreds: null\n              });\n\n            case 15:\n              _context10.next = 17;\n              return queryImpl(request, location, matches, requestContext);\n\n            case 17:\n              result = _context10.sent;\n\n              if (!isResponse(result)) {\n                _context10.next = 20;\n                break;\n              }\n\n              return _context10.abrupt(\"return\", result);\n\n            case 20:\n              return _context10.abrupt(\"return\", _extends({\n                location: location,\n                basename: basename\n              }, result));\n\n            case 21:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n    return _query.apply(this, arguments);\n  }\n\n  function queryRoute(_x42, _x43) {\n    return _queryRoute.apply(this, arguments);\n  }\n\n  function _queryRoute() {\n    _queryRoute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(request, _temp3) {\n      var _ref8, routeId, requestContext, url, method, location, matches, match, result, error, _result$activeDeferre, data;\n\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _ref8 = _temp3 === void 0 ? {} : _temp3, routeId = _ref8.routeId, requestContext = _ref8.requestContext;\n              url = new URL(request.url);\n              method = request.method.toLowerCase();\n              location = createLocation(\"\", createPath(url), null, \"default\");\n              matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n              if (!(!isValidMethod(method) && method !== \"head\" && method !== \"options\")) {\n                _context11.next = 9;\n                break;\n              }\n\n              throw getInternalRouterError(405, {\n                method: method\n              });\n\n            case 9:\n              if (matches) {\n                _context11.next = 11;\n                break;\n              }\n\n              throw getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n\n            case 11:\n              match = routeId ? matches.find(function (m) {\n                return m.route.id === routeId;\n              }) : getTargetMatch(matches, location);\n\n              if (!(routeId && !match)) {\n                _context11.next = 16;\n                break;\n              }\n\n              throw getInternalRouterError(403, {\n                pathname: location.pathname,\n                routeId: routeId\n              });\n\n            case 16:\n              if (match) {\n                _context11.next = 18;\n                break;\n              }\n\n              throw getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n\n            case 18:\n              _context11.next = 20;\n              return queryImpl(request, location, matches, requestContext, match);\n\n            case 20:\n              result = _context11.sent;\n\n              if (!isResponse(result)) {\n                _context11.next = 23;\n                break;\n              }\n\n              return _context11.abrupt(\"return\", result);\n\n            case 23:\n              error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n              if (!(error !== undefined)) {\n                _context11.next = 26;\n                break;\n              }\n\n              throw error;\n\n            case 26:\n              if (!result.actionData) {\n                _context11.next = 28;\n                break;\n              }\n\n              return _context11.abrupt(\"return\", Object.values(result.actionData)[0]);\n\n            case 28:\n              if (!result.loaderData) {\n                _context11.next = 32;\n                break;\n              }\n\n              data = Object.values(result.loaderData)[0];\n\n              if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n                data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n              }\n\n              return _context11.abrupt(\"return\", data);\n\n            case 32:\n              return _context11.abrupt(\"return\", undefined);\n\n            case 33:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n    return _queryRoute.apply(this, arguments);\n  }\n\n  function queryImpl(_x44, _x45, _x46, _x47, _x48) {\n    return _queryImpl.apply(this, arguments);\n  }\n\n  function _queryImpl() {\n    _queryImpl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(request, location, matches, requestContext, routeMatch) {\n      var _result, result;\n\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n              _context12.prev = 1;\n\n              if (!isMutationMethod(request.method.toLowerCase())) {\n                _context12.next = 7;\n                break;\n              }\n\n              _context12.next = 5;\n              return submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n\n            case 5:\n              _result = _context12.sent;\n              return _context12.abrupt(\"return\", _result);\n\n            case 7:\n              _context12.next = 9;\n              return loadRouteData(request, matches, requestContext, routeMatch);\n\n            case 9:\n              result = _context12.sent;\n              return _context12.abrupt(\"return\", isResponse(result) ? result : _extends({}, result, {\n                actionData: null,\n                actionHeaders: {}\n              }));\n\n            case 13:\n              _context12.prev = 13;\n              _context12.t0 = _context12[\"catch\"](1);\n\n              if (!isQueryRouteResponse(_context12.t0)) {\n                _context12.next = 19;\n                break;\n              }\n\n              if (!(_context12.t0.type === ResultType.error && !isRedirectResponse(_context12.t0.response))) {\n                _context12.next = 18;\n                break;\n              }\n\n              throw _context12.t0.response;\n\n            case 18:\n              return _context12.abrupt(\"return\", _context12.t0.response);\n\n            case 19:\n              if (!isRedirectResponse(_context12.t0)) {\n                _context12.next = 21;\n                break;\n              }\n\n              return _context12.abrupt(\"return\", _context12.t0);\n\n            case 21:\n              throw _context12.t0;\n\n            case 22:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, null, [[1, 13]]);\n    }));\n    return _queryImpl.apply(this, arguments);\n  }\n\n  function submit(_x49, _x50, _x51, _x52, _x53) {\n    return _submit.apply(this, arguments);\n  }\n\n  function _submit() {\n    _submit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(request, matches, actionMatch, requestContext, isRouteRequest) {\n      var result, error, method, _error4, boundaryMatch, _context13, loaderRequest, context;\n\n      return _regeneratorRuntime.wrap(function _callee13$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              if (actionMatch.route.action) {\n                _context14.next = 7;\n                break;\n              }\n\n              error = getInternalRouterError(405, {\n                method: request.method,\n                pathname: new URL(request.url).pathname,\n                routeId: actionMatch.route.id\n              });\n\n              if (!isRouteRequest) {\n                _context14.next = 4;\n                break;\n              }\n\n              throw error;\n\n            case 4:\n              result = {\n                type: ResultType.error,\n                error: error\n              };\n              _context14.next = 13;\n              break;\n\n            case 7:\n              _context14.next = 9;\n              return callLoaderOrAction(\"action\", request, actionMatch, matches, basename, true, isRouteRequest, requestContext);\n\n            case 9:\n              result = _context14.sent;\n\n              if (!request.signal.aborted) {\n                _context14.next = 13;\n                break;\n              }\n\n              method = isRouteRequest ? \"queryRoute\" : \"query\";\n              throw new Error(method + \"() call aborted\");\n\n            case 13:\n              if (!isRedirectResult(result)) {\n                _context14.next = 15;\n                break;\n              }\n\n              throw new Response(null, {\n                status: result.status,\n                headers: {\n                  Location: result.location\n                }\n              });\n\n            case 15:\n              if (!isDeferredResult(result)) {\n                _context14.next = 20;\n                break;\n              }\n\n              _error4 = getInternalRouterError(400, {\n                type: \"defer-action\"\n              });\n\n              if (!isRouteRequest) {\n                _context14.next = 19;\n                break;\n              }\n\n              throw _error4;\n\n            case 19:\n              result = {\n                type: ResultType.error,\n                error: _error4\n              };\n\n            case 20:\n              if (!isRouteRequest) {\n                _context14.next = 24;\n                break;\n              }\n\n              if (!isErrorResult(result)) {\n                _context14.next = 23;\n                break;\n              }\n\n              throw result.error;\n\n            case 23:\n              return _context14.abrupt(\"return\", {\n                matches: [actionMatch],\n                loaderData: {},\n                actionData: _defineProperty({}, actionMatch.route.id, result.data),\n                errors: null,\n                // Note: statusCode + headers are unused here since queryRoute will\n                // return the raw Response or value\n                statusCode: 200,\n                loaderHeaders: {},\n                actionHeaders: {},\n                activeDeferreds: null\n              });\n\n            case 24:\n              if (!isErrorResult(result)) {\n                _context14.next = 30;\n                break;\n              }\n\n              // Store off the pending error - we use it to determine which loaders\n              // to call and will commit it when we complete the navigation\n              boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n              _context14.next = 28;\n              return loadRouteData(request, matches, requestContext, undefined, _defineProperty({}, boundaryMatch.route.id, result.error));\n\n            case 28:\n              _context13 = _context14.sent;\n              return _context14.abrupt(\"return\", _extends({}, _context13, {\n                statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n                actionData: null,\n                actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n              }));\n\n            case 30:\n              // Create a GET request for the loaders\n              loaderRequest = new Request(request.url, {\n                headers: request.headers,\n                redirect: request.redirect,\n                signal: request.signal\n              });\n              _context14.next = 33;\n              return loadRouteData(loaderRequest, matches, requestContext);\n\n            case 33:\n              context = _context14.sent;\n              return _context14.abrupt(\"return\", _extends({}, context, result.statusCode ? {\n                statusCode: result.statusCode\n              } : {}, {\n                actionData: _defineProperty({}, actionMatch.route.id, result.data),\n                actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n              }));\n\n            case 35:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee13);\n    }));\n    return _submit.apply(this, arguments);\n  }\n\n  function loadRouteData(_x54, _x55, _x56, _x57, _x58) {\n    return _loadRouteData.apply(this, arguments);\n  }\n\n  function _loadRouteData() {\n    _loadRouteData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(request, matches, requestContext, routeMatch, pendingActionError) {\n      var isRouteRequest, requestMatches, matchesToLoad, results, method, activeDeferreds, context, executedLoaders;\n      return _regeneratorRuntime.wrap(function _callee14$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n              if (!(isRouteRequest && !(routeMatch != null && routeMatch.route.loader))) {\n                _context15.next = 3;\n                break;\n              }\n\n              throw getInternalRouterError(400, {\n                method: request.method,\n                pathname: new URL(request.url).pathname,\n                routeId: routeMatch == null ? void 0 : routeMatch.route.id\n              });\n\n            case 3:\n              requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n              matchesToLoad = requestMatches.filter(function (m) {\n                return m.route.loader;\n              }); // Short circuit if we have no loaders to run (query())\n\n              if (!(matchesToLoad.length === 0)) {\n                _context15.next = 7;\n                break;\n              }\n\n              return _context15.abrupt(\"return\", {\n                matches: matches,\n                // Add a null for all matched routes for proper revalidation on the client\n                loaderData: matches.reduce(function (acc, m) {\n                  return Object.assign(acc, _defineProperty({}, m.route.id, null));\n                }, {}),\n                errors: pendingActionError || null,\n                statusCode: 200,\n                loaderHeaders: {},\n                activeDeferreds: null\n              });\n\n            case 7:\n              _context15.next = 9;\n              return Promise.all(_toConsumableArray(matchesToLoad.map(function (match) {\n                return callLoaderOrAction(\"loader\", request, match, matches, basename, true, isRouteRequest, requestContext);\n              })));\n\n            case 9:\n              results = _context15.sent;\n\n              if (!request.signal.aborted) {\n                _context15.next = 13;\n                break;\n              }\n\n              method = isRouteRequest ? \"queryRoute\" : \"query\";\n              throw new Error(method + \"() call aborted\");\n\n            case 13:\n              // Process and commit output from loaders\n              activeDeferreds = new Map();\n              context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds); // Add a null for any non-loader matches for proper revalidation on the client\n\n              executedLoaders = new Set(matchesToLoad.map(function (match) {\n                return match.route.id;\n              }));\n              matches.forEach(function (match) {\n                if (!executedLoaders.has(match.route.id)) {\n                  context.loaderData[match.route.id] = null;\n                }\n              });\n              return _context15.abrupt(\"return\", _extends({}, context, {\n                matches: matches,\n                activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n              }));\n\n            case 18:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee14);\n    }));\n    return _loadRouteData.apply(this, arguments);\n  }\n\n  return {\n    dataRoutes: dataRoutes,\n    query: query,\n    queryRoute: queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\n\nfunction getStaticContextFromError(routes, context, error) {\n  var newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: _defineProperty({}, context._deepestRenderedBoundaryId || routes[0].id, error)\n  });\n\n  return newContext;\n}\n\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n\n  var path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path: path\n    };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path: path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  var submission;\n\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path: path,\n        submission: submission\n      };\n    }\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  var parsedPath = parsePath(path);\n  var searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n  // navigation GET submissions which run all loaders), we need to preserve\n  // any incoming ?index params\n\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission: submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  var boundaryMatches = matches;\n\n  if (boundaryId) {\n    var index = matches.findIndex(function (m) {\n      return m.route.id === boundaryId;\n    });\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  var actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  var currentUrl = history.createURL(state.location);\n  var nextUrl = history.createURL(location);\n  var defaultShouldRevalidate = // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search; // Pick navigation matches that are net-new or qualify for revalidation\n\n  var boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  var boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  var navigationMatches = boundaryMatches.filter(function (match, index) {\n    if (match.route.loader == null) {\n      return false;\n    } // Always call the loader on new route instances and pending defer cancellations\n\n\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(function (id) {\n      return id === match.route.id;\n    })) {\n      return true;\n    } // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n\n\n    var currentRouteMatch = state.matches[index];\n    var nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl: currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl: nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult: actionResult,\n      defaultShouldRevalidate: defaultShouldRevalidate || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  var revalidatingFetchers = [];\n  fetchLoadMatches && fetchLoadMatches.forEach(function (f, key) {\n    if (!matches.some(function (m) {\n      return m.route.id === f.routeId;\n    })) {\n      // This fetcher is not going to be present in the subsequent render so\n      // there's no need to revalidate it\n      return;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // This fetcher was cancelled from a prior action submission - force reload\n      revalidatingFetchers.push(_extends({\n        key: key\n      }, f));\n    } else {\n      // Revalidating fetchers are decoupled from the route matches since they\n      // hit a static href, so they _always_ check shouldRevalidate and the\n      // default is strictly if a revalidation is explicitly required (action\n      // submissions, useRevalidator, X-Remix-Revalidate).\n      var shouldRevalidate = shouldRevalidateLoader(f.match, _extends({\n        currentUrl: currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl: nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult: actionResult,\n        defaultShouldRevalidate: defaultShouldRevalidate\n      }));\n\n      if (shouldRevalidate) {\n        revalidatingFetchers.push(_extends({\n          key: key\n        }, f));\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  var isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  var isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  var currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    var routeChoice = loaderMatch.route.shouldRevalidate(arg);\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\nfunction callLoaderOrAction(_x59, _x60, _x61, _x62, _x63, _x64, _x65, _x66) {\n  return _callLoaderOrAction.apply(this, arguments);\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\n\nfunction _callLoaderOrAction() {\n  _callLoaderOrAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(type, request, match, matches, basename, isStaticRequest, isRouteRequest, requestContext) {\n    var resultType, result, reject, abortPromise, onReject, handler, status, location, isAbsolute, activeMatches, routePathnames, resolvedLocation, path, currentUrl, url, data, contentType;\n    return _regeneratorRuntime.wrap(function _callee15$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n            if (basename === void 0) {\n              basename = \"/\";\n            }\n\n            if (isStaticRequest === void 0) {\n              isStaticRequest = false;\n            }\n\n            if (isRouteRequest === void 0) {\n              isRouteRequest = false;\n            }\n\n            abortPromise = new Promise(function (_, r) {\n              return reject = r;\n            });\n\n            onReject = function onReject() {\n              return reject();\n            };\n\n            request.signal.addEventListener(\"abort\", onReject);\n            _context16.prev = 6;\n            handler = match.route[type];\n            invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n            _context16.next = 11;\n            return Promise.race([handler({\n              request: request,\n              params: match.params,\n              context: requestContext\n            }), abortPromise]);\n\n          case 11:\n            result = _context16.sent;\n            invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n            _context16.next = 19;\n            break;\n\n          case 15:\n            _context16.prev = 15;\n            _context16.t0 = _context16[\"catch\"](6);\n            resultType = ResultType.error;\n            result = _context16.t0;\n\n          case 19:\n            _context16.prev = 19;\n            request.signal.removeEventListener(\"abort\", onReject);\n            return _context16.finish(19);\n\n          case 22:\n            if (!isResponse(result)) {\n              _context16.next = 48;\n              break;\n            }\n\n            status = result.status; // Process redirects\n\n            if (!redirectStatusCodes.has(status)) {\n              _context16.next = 33;\n              break;\n            }\n\n            location = result.headers.get(\"Location\");\n            invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n            isAbsolute = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i.test(location); // Support relative routing in internal redirects\n\n            if (!isAbsolute) {\n              activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n              routePathnames = getPathContributingMatches(activeMatches).map(function (match) {\n                return match.pathnameBase;\n              });\n              resolvedLocation = resolveTo(location, routePathnames, new URL(request.url).pathname);\n              invariant(createPath(resolvedLocation), \"Unable to resolve redirect location: \" + location); // Prepend the basename to the redirect location if we have one\n\n              if (basename) {\n                path = resolvedLocation.pathname;\n                resolvedLocation.pathname = path === \"/\" ? basename : joinPaths([basename, path]);\n              }\n\n              location = createPath(resolvedLocation);\n            } else if (!isStaticRequest) {\n              // Strip off the protocol+origin for same-origin absolute redirects.\n              // If this is a static reques, we can let it go back to the browser\n              // as-is\n              currentUrl = new URL(request.url);\n              url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n\n              if (url.origin === currentUrl.origin) {\n                location = url.pathname + url.search + url.hash;\n              }\n            } // Don't process redirects in the router during static requests requests.\n            // Instead, throw the Response and let the server handle it with an HTTP\n            // redirect.  We also update the Location header in place in this flow so\n            // basename and relative routing is taken into account\n\n\n            if (!isStaticRequest) {\n              _context16.next = 32;\n              break;\n            }\n\n            result.headers.set(\"Location\", location);\n            throw result;\n\n          case 32:\n            return _context16.abrupt(\"return\", {\n              type: ResultType.redirect,\n              status: status,\n              location: location,\n              revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n            });\n\n          case 33:\n            if (!isRouteRequest) {\n              _context16.next = 35;\n              break;\n            }\n\n            throw {\n              type: resultType || ResultType.data,\n              response: result\n            };\n\n          case 35:\n            contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n            // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n\n            if (!(contentType && /\\bapplication\\/json\\b/.test(contentType))) {\n              _context16.next = 42;\n              break;\n            }\n\n            _context16.next = 39;\n            return result.json();\n\n          case 39:\n            data = _context16.sent;\n            _context16.next = 45;\n            break;\n\n          case 42:\n            _context16.next = 44;\n            return result.text();\n\n          case 44:\n            data = _context16.sent;\n\n          case 45:\n            if (!(resultType === ResultType.error)) {\n              _context16.next = 47;\n              break;\n            }\n\n            return _context16.abrupt(\"return\", {\n              type: resultType,\n              error: new ErrorResponse(status, result.statusText, data),\n              headers: result.headers\n            });\n\n          case 47:\n            return _context16.abrupt(\"return\", {\n              type: ResultType.data,\n              data: data,\n              statusCode: result.status,\n              headers: result.headers\n            });\n\n          case 48:\n            if (!(resultType === ResultType.error)) {\n              _context16.next = 50;\n              break;\n            }\n\n            return _context16.abrupt(\"return\", {\n              type: resultType,\n              error: result\n            });\n\n          case 50:\n            if (!(result instanceof DeferredData)) {\n              _context16.next = 52;\n              break;\n            }\n\n            return _context16.abrupt(\"return\", {\n              type: ResultType.deferred,\n              deferredData: result\n            });\n\n          case 52:\n            return _context16.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result\n            });\n\n          case 53:\n          case \"end\":\n            return _context16.stop();\n        }\n      }\n    }, _callee15, null, [[6, 15, 19, 22]]);\n  }));\n  return _callLoaderOrAction.apply(this, arguments);\n}\n\nfunction createClientSideRequest(history, location, signal, submission) {\n  var url = history.createURL(stripHashFromPath(location)).toString();\n  var init = {\n    signal: signal\n  };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    var formMethod = submission.formMethod,\n        formEncType = submission.formEncType,\n        formData = submission.formData;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  var searchParams = new URLSearchParams();\n\n  var _iterator6 = _createForOfIteratorHelper(formData.entries()),\n      _step6;\n\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var _step6$value = _slicedToArray(_step6.value, 2),\n          key = _step6$value[0],\n          value = _step6$value[1];\n\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n      searchParams.append(key, value instanceof File ? value.name : value);\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  var loaderData = {};\n  var errors = null;\n  var statusCode;\n  var foundError = false;\n  var loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach(function (result, index) {\n    var id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      var boundaryMatch = findNearestBoundary(matches, id);\n      var error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      } // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData: loaderData,\n    errors: errors,\n    statusCode: statusCode || 200,\n    loaderHeaders: loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  var _processRouteLoaderDa = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds),\n      loaderData = _processRouteLoaderDa.loaderData,\n      errors = _processRouteLoaderDa.errors; // Process results from our revalidating fetchers\n\n\n  for (var index = 0; index < revalidatingFetchers.length; index++) {\n    var _revalidatingFetchers = revalidatingFetchers[index],\n        key = _revalidatingFetchers.key,\n        match = _revalidatingFetchers.match;\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    var result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      var boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, _defineProperty({}, boundaryMatch.route.id, result.error));\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      var doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData: loaderData,\n    errors: errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  var mergedLoaderData = _extends({}, newLoaderData);\n\n  var _iterator7 = _createForOfIteratorHelper(matches),\n      _step7;\n\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var match = _step7.value;\n      var id = match.route.id;\n\n      if (newLoaderData.hasOwnProperty(id)) {\n        if (newLoaderData[id] !== undefined) {\n          mergedLoaderData[id] = newLoaderData[id];\n        }\n      } else if (loaderData[id] !== undefined) {\n        mergedLoaderData[id] = loaderData[id];\n      }\n\n      if (errors && errors.hasOwnProperty(id)) {\n        // Don't keep any loader data below the boundary\n        break;\n      }\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  var eligibleMatches = routeId ? matches.slice(0, matches.findIndex(function (m) {\n    return m.route.id === routeId;\n  }) + 1) : _toConsumableArray(matches);\n  return eligibleMatches.reverse().find(function (m) {\n    return m.route.hasErrorBoundary === true;\n  }) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  var route = routes.find(function (r) {\n    return r.index || !r.path || r.path === \"/\";\n  }) || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route: route\n    }],\n    route: route\n  };\n}\n\nfunction getInternalRouterError(status, _temp4) {\n  var _ref11 = _temp4 === void 0 ? {} : _temp4,\n      pathname = _ref11.pathname,\n      routeId = _ref11.routeId,\n      method = _ref11.method,\n      type = _ref11.type;\n\n  var statusText = \"Unknown Server Error\";\n  var errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (var i = results.length - 1; i >= 0; i--) {\n    var result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  var parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\n\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  var status = result.status;\n  var location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\n\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method);\n}\n\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method);\n}\n\nfunction resolveDeferredResults(_x67, _x68, _x69, _x70, _x71, _x72) {\n  return _resolveDeferredResults.apply(this, arguments);\n}\n\nfunction _resolveDeferredResults() {\n  _resolveDeferredResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n    var _loop, index;\n\n    return _regeneratorRuntime.wrap(function _callee16$(_context18) {\n      while (1) {\n        switch (_context18.prev = _context18.next) {\n          case 0:\n            _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop(index) {\n              var result, match, currentMatch, isRevalidatingLoader;\n              return _regeneratorRuntime.wrap(function _loop$(_context17) {\n                while (1) {\n                  switch (_context17.prev = _context17.next) {\n                    case 0:\n                      result = results[index];\n                      match = matchesToLoad[index];\n                      currentMatch = currentMatches.find(function (m) {\n                        return m.route.id === match.route.id;\n                      });\n                      isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n                      if (!(isDeferredResult(result) && (isFetcher || isRevalidatingLoader))) {\n                        _context17.next = 7;\n                        break;\n                      }\n\n                      _context17.next = 7;\n                      return resolveDeferredData(result, signal, isFetcher).then(function (result) {\n                        if (result) {\n                          results[index] = result || results[index];\n                        }\n                      });\n\n                    case 7:\n                    case \"end\":\n                      return _context17.stop();\n                  }\n                }\n              }, _loop);\n            });\n            index = 0;\n\n          case 2:\n            if (!(index < results.length)) {\n              _context18.next = 7;\n              break;\n            }\n\n            return _context18.delegateYield(_loop(index), \"t0\", 4);\n\n          case 4:\n            index++;\n            _context18.next = 2;\n            break;\n\n          case 7:\n          case \"end\":\n            return _context18.stop();\n        }\n      }\n    }, _callee16);\n  }));\n  return _resolveDeferredResults.apply(this, arguments);\n}\n\nfunction resolveDeferredData(_x73, _x74, _x75) {\n  return _resolveDeferredData.apply(this, arguments);\n}\n\nfunction _resolveDeferredData() {\n  _resolveDeferredData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(result, signal, unwrap) {\n    var aborted;\n    return _regeneratorRuntime.wrap(function _callee17$(_context19) {\n      while (1) {\n        switch (_context19.prev = _context19.next) {\n          case 0:\n            if (unwrap === void 0) {\n              unwrap = false;\n            }\n\n            _context19.next = 3;\n            return result.deferredData.resolveData(signal);\n\n          case 3:\n            aborted = _context19.sent;\n\n            if (!aborted) {\n              _context19.next = 6;\n              break;\n            }\n\n            return _context19.abrupt(\"return\");\n\n          case 6:\n            if (!unwrap) {\n              _context19.next = 14;\n              break;\n            }\n\n            _context19.prev = 7;\n            return _context19.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result.deferredData.unwrappedData\n            });\n\n          case 11:\n            _context19.prev = 11;\n            _context19.t0 = _context19[\"catch\"](7);\n            return _context19.abrupt(\"return\", {\n              type: ResultType.error,\n              error: _context19.t0\n            });\n\n          case 14:\n            return _context19.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result.deferredData.data\n            });\n\n          case 15:\n          case \"end\":\n            return _context19.stop();\n        }\n      }\n    }, _callee17, null, [[7, 11]]);\n  }));\n  return _resolveDeferredData.apply(this, arguments);\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(function (v) {\n    return v === \"\";\n  });\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  var route = match.route,\n      pathname = match.pathname,\n      params = match.params;\n  return {\n    id: route.id,\n    pathname: pathname,\n    params: params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  var search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  var pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, warning };","map":{"version":3,"sources":["../history.ts","../utils.ts","../router.ts"],"names":["Action","PopStateEventType","options","initialEntries","v5Compat","entries","createMemoryLocation","entry","index","clampIndex","initialIndex","action","listener","Math","state","location","createLocation","getCurrentLocation","warning","JSON","createPath","history","createHref","createURL","encodeLocation","path","parsePath","pathname","search","hash","push","nextLocation","delta","replace","go","nextIndex","listen","window","globalHistory","getUrlBasedHistory","base","href","url","hashIndex","value","console","usr","key","idx","current","to","createKey","parsedPath","searchIndex","document","getIndex","validateLocation","historyState","getHistoryState","invariant","getLocation","ResultType","route","parentPath","allIds","treePath","id","isIndexRoute","indexRoute","pathOrLayoutRoute","children","convertRoutesToDataRoutes","undefined","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","meta","relativePath","caseSensitive","childrenIndex","joinPaths","routesMeta","score","computeScore","routes","includes","explodeOptionalSegments","segments","isOptional","first","required","rest","restExploded","result","subpath","exploded","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","segment","siblings","n","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","originalPath","param","optional","star","str","pattern","compilePath","captureGroups","paramName","splatValue","memo","safelyDecodeURIComponent","paramNames","regexpSource","matcher","decodeURI","error","decodeURIComponent","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","field","isPathRelative","getInvalidPathError","isEmptyPath","toArg","from","routePathnameIndex","routePathnames","toSegments","hasExplicitTrailingSlash","hasCurrentTrailingSlash","locationPathname","paths","json","init","responseInit","status","headers","DeferredData","constructor","data","Array","reject","onAbort","promise","Promise","get","subscriber","subscribers","aborted","signal","resolve","subscribe","done","unwrapTrackedPromise","isTrackedPromise","defer","redirect","ErrorResponse","internal","statusText","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","isBrowser","isServer","dataRoutes","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","matchRoutes","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","activeBlocker","blockerFunctions","ignoreNextHistoryUpdate","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","deleteBlocker","updateState","router","startNavigation","pendingNavigationController","deleteFetcher","isActionReload","isMutationMethod","_isRedirect","newState","mergeLoaderData","getSavedScrollPosition","normalizeNavigateOptions","opts","userReplace","submission","navigate","pendingError","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","loadingNavigation","cancelActiveDeferreds","completeNavigation","isHashChangeOnly","request","createClientSideRequest","findNearestBoundary","actionOutput","handleAction","pendingActionData","handleLoaders","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","shortCircuited","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","pendingActionError","isDeferredResult","activeSubmission","getMatchesToLoad","matchesToLoad","revalidatingFetchers","rf","fetcher","revalidatingFetcher","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","isFetchActionRedirect","revalidationRequest","loadId","loadFetcher","staleKey","r","doneFetcher","resolveDeferredData","redirectLocation","_isFetchActionRedirect","newOrigin","redirectHistoryAction","results","fetchersToLoad","f","loaderResults","resolveDeferredResults","controller","getFetcher","doneKeys","markFetchersDone","yeetedKeys","blocker","newBlocker","blockerFunction","cancelledRouteIds","predicate","dfd","getKey","y","userMatches","createUseMatchesMatch","initialize","enableScrollRestoration","fetch","revalidate","dispose","getBlocker","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","requestContext","isValidMethod","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","submit","routeMatch","loadRouteData","isQueryRouteResponse","e","isRedirectResponse","isRouteRequest","Location","context","isRouteErrorResponse","loaderRequest","requestMatches","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","query","queryRoute","getStaticContextFromError","newContext","isFetcher","isSubmissionNavigation","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","boundaryMatches","currentUrl","nextUrl","defaultShouldRevalidate","boundaryId","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","isNewRouteInstance","shouldRevalidate","isNew","currentMatch","isMissingData","currentLoaderData","currentPath","loaderMatch","routeChoice","arg","isStaticRequest","abortPromise","onReject","handler","resultType","isAbsolute","activeMatches","getPathContributingMatches","resolvedLocation","resolveTo","response","contentType","foundError","mergedLoaderData","newLoaderData","eligibleMatches","errorMessage","obj","currentMatches","isRevalidatingLoader","unwrap","unwrappedData","v","handle","pathMatches"],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type MutationFormMethod = \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormMethod = \"get\" | MutationFormMethod;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = { ...route, id };\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        children: route.children\n          ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n          : undefined,\n      };\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  return (\n    path\n      .replace(\n        /^:(\\w+)(\\??)/g,\n        (_, key: PathParam<Path>, optional: string | undefined) => {\n          let param = params[key];\n          if (optional === \"?\") {\n            return param == null ? \"\" : param;\n          }\n          if (param == null) {\n            invariant(false, `Missing \":${key}\" param`);\n          }\n          return param;\n        }\n      )\n      .replace(\n        /\\/:(\\w+)(\\??)/g,\n        (_, key: PathParam<Path>, optional: string | undefined) => {\n          let param = params[key];\n          if (optional === \"?\") {\n            return param == null ? \"\" : `/${param}`;\n          }\n          if (param == null) {\n            invariant(false, `Missing \":${key}\" param`);\n          }\n          return `/${param}`;\n        }\n      )\n      // Remove any optional markers from optional static segments\n      .replace(/\\?/g, \"\")\n      .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n        const star = \"*\" as PathParam<Path>;\n\n        if (params[star] == null) {\n          // If no splat was provided, trim the trailing slash _unless_ it's\n          // the entire path\n          return str === \"/*\" ? \"/\" : \"\";\n        }\n\n        // Apply the splat\n        return `${prefix}${params[star]}`;\n      })\n  );\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging @remix-run/router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  MutationFormMethod,\n  ShouldRevalidateFunction,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  warning,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n  match: AgnosticDataRouteMatch;\n  matches: AgnosticDataRouteMatch[];\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // We ony support a single active blocker at the moment since we don't have\n  // any compelling use cases for multi-blocker yet\n  let activeBlocker: string | null = null;\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          activeBlocker != null && delta === null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              deleteBlocker(blockerKey!);\n              updateState({ blockers: new Map(router.state.blockers) });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(\n        location,\n        newState.matches || state.matches\n      ),\n      preventScrollReset,\n      blockers: new Map(state.blockers),\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          deleteBlocker(blockerKey!);\n          updateState({ blockers: new Map(state.blockers) });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a mutation submission\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n    if (\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        ...submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission\n      ? submission\n      : loadingNavigation.formMethod &&\n        loadingNavigation.formAction &&\n        loadingNavigation.formData &&\n        loadingNavigation.formEncType\n      ? {\n          formMethod: loadingNavigation.formMethod,\n          formAction: loadingNavigation.formAction,\n          formData: loadingNavigation.formData,\n          formEncType: loadingNavigation.formEncType,\n        }\n      : undefined;\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach((rf) =>\n      fetchControllers.set(rf.key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: href })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path, match, matches });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      router.basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n\n    // Check if this an external redirect that goes to a new origin\n    if (isBrowser && typeof window?.location !== \"undefined\") {\n      let newOrigin = init.history.createURL(redirect.location).origin;\n      if (window.location.origin !== newOrigin) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData,\n      };\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      submission &&\n      isMutationMethod(submission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...submission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\"loader\", request, match, matches, router.basename)\n      ),\n      ...fetchersToLoad.map((f) =>\n        callLoaderOrAction(\n          \"loader\",\n          createClientSideRequest(init.history, f.path, request.signal),\n          f.match,\n          f.matches,\n          router.basename\n        )\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n      if (activeBlocker == null) {\n        // This is now the active blocker\n        activeBlocker = key;\n      } else if (key !== activeBlocker) {\n        warning(false, \"A router only supports one blocker at a time\");\n      }\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n    if (activeBlocker === key) {\n      activeBlocker = null;\n    }\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    state.blockers.set(key, newBlocker);\n    updateState({ blockers: new Map(state.blockers) });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (activeBlocker == null) {\n      return;\n    }\n\n    // We only allow a single blocker at the moment.  This will need to be\n    // updated if we enhance to support multiple blockers in the future\n    let blockerFunction = blockerFunctions.get(activeBlocker);\n    invariant(\n      blockerFunction,\n      \"Could not find a function for the active blocker\"\n    );\n    let blocker = state.blockers.get(activeBlocker);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return activeBlocker;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: {\n    basename?: string;\n  }\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\" && method !== \"options\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !routeMatch?.route.loader) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  let submission: Submission | undefined;\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType:\n        (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n      formData: opts.formData,\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return { path, submission };\n    }\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData);\n  // Since fetcher GET submissions only run a single loader (as opposed to\n  // navigation GET submissions which run all loaders), we need to preserve\n  // any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  let defaultShouldRevalidate =\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        defaultShouldRevalidate ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches &&\n    fetchLoadMatches.forEach((f, key) => {\n      if (!matches.some((m) => m.route.id === f.routeId)) {\n        // This fetcher is not going to be present in the subsequent render so\n        // there's no need to revalidate it\n        return;\n      } else if (cancelledFetcherLoads.includes(key)) {\n        // This fetcher was cancelled from a prior action submission - force reload\n        revalidatingFetchers.push({ key, ...f });\n      } else {\n        // Revalidating fetchers are decoupled from the route matches since they\n        // hit a static href, so they _always_ check shouldRevalidate and the\n        // default is strictly if a revalidation is explicitly required (action\n        // submissions, useRevalidator, X-Remix-Revalidate).\n        let shouldRevalidate = shouldRevalidateLoader(f.match, {\n          currentUrl,\n          currentParams: state.matches[state.matches.length - 1].params,\n          nextUrl,\n          nextParams: matches[matches.length - 1].params,\n          ...submission,\n          actionResult,\n          defaultShouldRevalidate,\n        });\n        if (shouldRevalidate) {\n          revalidatingFetchers.push({ key, ...f });\n        }\n      }\n    });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: Parameters<ShouldRevalidateFunction>[0]\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  basename = \"/\",\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      let isAbsolute = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i.test(location);\n\n      // Support relative routing in internal redirects\n      if (!isAbsolute) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(\n          (match) => match.pathnameBase\n        );\n        let resolvedLocation = resolveTo(\n          location,\n          routePathnames,\n          new URL(request.url).pathname\n        );\n        invariant(\n          createPath(resolvedLocation),\n          `Unable to resolve redirect location: ${location}`\n        );\n\n        // Prepend the basename to the redirect location if we have one\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname =\n            path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin absolute redirects.\n        // If this is a static reques, we can let it go back to the browser\n        // as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        if (url.origin === currentUrl.origin) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod {\n  return validRequestMethods.has(method as FormMethod);\n}\n\nfunction isMutationMethod(method?: string): method is MutationFormMethod {\n  return validMutationMethods.has(method as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n"]},"metadata":{},"sourceType":"module"}